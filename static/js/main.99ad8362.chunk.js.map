{"version":3,"sources":["app/router/context.ts","app/router/components/Router.tsx","app/router/components/View.tsx","app/router/components/Link.tsx","app/pages/Index.tsx","serviceWorker.ts","index.ts","app/App.tsx"],"names":["RouterStateContext","createContext","currentPath","setCurrentPath","name","Router","_ref","children","_useState","useState","window","location","pathname","_useState2","Object","slicedToArray","routerState","react_default","a","createElement","Provider","value","View","routes","noMatch","useContext","route","find","path","matchPath","Component","component","params","Link","to","Fragment","onClick","history","pushState","Index","objectDestructuringEmpty","About","_ref2","Article","_ref3","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","Router_Router","className","Link_Link","View_View","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.99ad8362.chunk.js","sourcesContent":["import { createContext } from \"react\"\n\nexport interface RouterState {\n    currentPath: string\n    setCurrentPath: (name: string) => void\n}\n\nexport const RouterStateContext = createContext<RouterState>({\n    currentPath: \"\",\n    setCurrentPath: (name: string) => { }\n})\n","import React, { FC, useState } from \"react\"\nimport { RouterStateContext, RouterState } from \"../context\"\n\nexport const Router: FC = ({ children }) => {\n    const [currentPath, setCurrentPath] = useState(window.location.pathname)\n    const routerState: RouterState = { currentPath, setCurrentPath }\n    return (\n        <RouterStateContext.Provider value={routerState} >\n            {children}\n        </RouterStateContext.Provider >\n    )\n}","import React, { FC, useContext } from \"react\"\nimport { RouterStateContext } from \"../context\"\n\ntype ViewProps = {\n    routes: Array<Route>,\n    noMatch: PageComponent\n}\n\ntype Route = {\n    path: string\n    component: PageComponent\n}\n\ntype PageComponent = FC<{ params?: object }>\n\nexport const View: FC<ViewProps> = ({ routes, noMatch }) => {\n    const { currentPath } = useContext(RouterStateContext)\n    const route = routes.find(route => matchPath(route.path, currentPath))\n    const Component = route ? route.component : noMatch\n    const params = {}\n    return <Component params={params} />\n}\n\nfunction matchPath(path: string, currentPath: string) {\n    return path === currentPath\n}\n","import React, { FC, useContext } from \"react\"\nimport { RouterStateContext } from \"../context\"\n\ninterface Props {\n    to: string\n}\n\nexport const Link: FC<Props> = ({ to, children }) => {\n    const { setCurrentPath } = useContext(RouterStateContext)\n    const go = () => {\n        window.history.pushState(null, \"\", to)\n        setCurrentPath(to)\n    }\n    return (<>\n        <button onClick={go}>{children}</button>\n    </>)\n}\n\n\n\nfunction go(to: string) {\n}\n\nexport default Link","import React, { FC } from \"react\"\n\nexport const Index: FC = ({ }) => {\n    return <p>hello, this is index page</p>\n}\n\nexport const About: FC = ({ }) => {\n    return <p>hello, this is about page</p>\n}\n\nexport const Article: FC = ({ }) => {\n    return <p>hello, this is article page</p>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createElement } from 'react'\nimport { render } from 'react-dom'\n\nimport { App } from './app/App'\nimport * as serviceWorker from './serviceWorker'\n\nrender(createElement(App), document.getElementById('root'))\n// render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","import React, { FC } from 'react';\nimport logo from './logo.svg';\n\nimport { Router, View, Link } from \"./router\"\n\nimport { Index, About, Article } from \"./pages/Index\"\n\nexport const App: FC = ({ }) => {\n  const routes = [{\n    path: \"/index\",\n    component: Index\n  }, {\n    path: \"/About\",\n    component: About\n  }, {\n    path: \"/article\",\n    component: Article\n  }]\n  return (\n    <Router>\n      <div className=\"App\">\n        <ul>\n          <Link to=\"/index\">Index</Link>\n          <Link to=\"/about\">About</Link>\n          <Link to=\"/article\">About</Link>\n        </ul>\n        <View routes={routes} noMatch={About}></View>\n      </div>\n    </Router>\n  )\n}\n"],"sourceRoot":""}